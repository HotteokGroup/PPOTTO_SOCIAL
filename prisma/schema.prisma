// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// 공유앨범
model ShareAlbum {
  id                       String                 @id @default(cuid())
  name                     String
  bio                      String?
  thumbnailId              String?
  smallThumbnailUrl        String?
  mediumThumbnailUrl       String?
  largeThumbnailUrl        String?
  deletedAt                DateTime?
  updatedAt                DateTime               @updatedAt
  createdAt                DateTime               @default(now())
  // Relation
  // ShareAlbum --< ShareAlbumMember
  shareAlbumMemberList     ShareAlbumMember[]
  // ShareAlbum --< ShareAlbumHistory
  shareAlbumHistoryList    ShareAlbumHistory[]
  // ShareAlbum --< ShareAlbumInviteCode
  shareAlbumInviteCodeList ShareAlbumInviteCode[]
  // ShareAlbum --< Feed
  feedList                 Feed[]

  //Index
  @@index([id], name: "ShareAlbum_id")
}

/// 공유앨범 멤버
model ShareAlbumMember {
  id           String               @id @default(cuid())
  shareAlbumId String
  userId       Int
  role         ShareAlbumMemberRole
  joinedAt     DateTime?
  deletedAt    DateTime?
  updatedAt    DateTime             @updatedAt
  createdAt    DateTime             @default(now())
  // Relation
  //  ShareAlbumMember >-- ShareAlbum
  shareAlbum   ShareAlbum           @relation(fields: [shareAlbumId], references: [id])

  //Unique
  @@unique([shareAlbumId, userId], name: "ShareAlbumMember_shareAlbumId_userId")
  //Index
  @@index([id], name: "ShareAlbumMember_id")
  @@index([userId], name: "ShareAlbumMember_userId")
  @@index([shareAlbumId, userId], name: "ShareAlbumMember_shareAlbumId_userId")
}

/// 공유앨범 멤버 권한
enum ShareAlbumMemberRole {
  OWNER
  EDITOR
  VIEWER
  TEMPORARY
}

/// 공유앨범 히스토리
model ShareAlbumHistory {
  id           String                @id @default(cuid())
  type         ShareAlbumHistoryType
  shareAlbumId String
  contentId    String?
  userId       Int?
  description  String?
  createdAt    DateTime              @default(now())
  // Relation
  // ShareAlbumHistory >-- ShareAlbum
  shareAlbum   ShareAlbum            @relation(fields: [shareAlbumId], references: [id])

  // Index
  @@index([id], name: "ShareAlbumHistory_id")
  @@index([shareAlbumId], name: "ShareAlbumHistory_shareAlbumId")
}

/// 공유앨범 히스토리 타입
enum ShareAlbumHistoryType {
  // 공유앨범 히스토리
  /// 공유앨범 생성
  CREATE_SHARE_ALBUM
  /// 공유앨범 수정
  UPDATE_SHARE_ALBUM
  /// 공유앨범 삭제
  DELETE_SHARE_ALBUM
  // 공유앨범 멤버 히스토리
  /// 공유앨범 초대
  INVITE_SHARE_ALBUM
  /// 공유앨범 가입
  JOIN_SHARE_ALBUM
  /// 공유앨범 탈퇴
  LEAVE_SHARE_ALBUM
}

/// 공유앨범 초대코드
model ShareAlbumInviteCode {
  id           String     @id @default(cuid())
  shareAlbumId String
  code         String     @unique
  deletedAt    DateTime?
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  // Relation
  // ShareAlbumInviteCode >-- ShareAlbum
  shareAlbum   ShareAlbum @relation(fields: [shareAlbumId], references: [id])

  // Index
  @@index([id], name: "ShareAlbumInviteCode_id")
  @@index([code], name: "ShareAlbumInviteCode_code")
}

/// 공유앨범 피드
model Feed {
  id             String              @id @default(cuid())
  shareAlbumId   String
  userId         Int
  description    String?
  deletedAt      DateTime?
  updatedAt      DateTime            @updatedAt
  createdAt      DateTime            @default(now())
  // Relation
  // Feed >-- ShareAlbum
  // Feed --< FeedContent
  // Feed --< FeedComment
  // Feed --< CollectionContent >-- Collection
  shareAlbum     ShareAlbum          @relation(fields: [shareAlbumId], references: [id])
  contentList    FeedContent[]
  commentList    FeedComment[]
  collectionList FeedsOnCollection[]

  // Index
  @@index([id], name: "Feed_id")
  @@index([shareAlbumId], name: "Feed_shareAlbumId")
  @@index([userId], name: "Feed_userId")
}

/// 공유앨범 피드 콘텐츠
model FeedContent {
  id               String          @id @default(cuid())
  feedId           String
  contentId        String
  type             FeedContentType
  contentSmallUrl  String?
  contentMediumUrl String?
  contentLargeUrl  String?
  deletedAt        DateTime?
  updatedAt        DateTime        @updatedAt
  createdAt        DateTime        @default(now())
  // Relation
  // FeedContent >-- Feed
  feed             Feed            @relation(fields: [feedId], references: [id])

  // Index
  @@index([id], name: "FeedContent_id")
  @@index([feedId], name: "FeedContent_feedId")
  @@index([contentId], name: "FeedContent_contentId")
}

enum FeedContentType {
  IMAGE
  VIDEO
}

/// 피드 코멘트
model FeedComment {
  id          String    @id @default(cuid())
  feedId      String
  userId      Int
  description String?
  deletedAt   DateTime?
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  // Relation
  // FeedComment >-- Feed
  feed        Feed      @relation(fields: [feedId], references: [id])

  // Index
  @@index([id], name: "FeedComment_id")
  @@index([feedId], name: "FeedComment_feedId")
  @@index([userId], name: "FeedComment_userId")
}

/// 컬렉션
model Collection {
  id          String              @id @default(cuid())
  userId      Int
  name        String
  description String?
  deletedAt   DateTime?
  updatedAt   DateTime            @updatedAt
  createdAt   DateTime            @default(now())
  // Relation
  // Collection --< CollectionContent >-- Feed
  feedList    FeedsOnCollection[]

  // Index
  @@index([id], name: "Collection_id")
  @@index([userId], name: "Collection_userId")
}

/// 피드 컬렉션 다대다 관계 테이블
model FeedsOnCollection {
  id           String     @id @default(cuid())
  collectionId String
  feedId       String
  deletedAt    DateTime?
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  // Relation
  // Feed --< CollectionContent >-- Collection
  collection   Collection @relation(fields: [collectionId], references: [id])
  feed         Feed       @relation(fields: [feedId], references: [id])

  // Index
  @@index([id], name: "FeedsOnCollection_id")
  @@index([collectionId], name: "FeedsOnCollection_collectionId")
  @@index([feedId], name: "FeedsOnCollection_feedId")
  @@index([collectionId, feedId], name: "FeedsOnCollection_collectionId_feedId")
}
